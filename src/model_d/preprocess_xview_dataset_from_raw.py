"""
  preprocess_xview_dataset_from_raw.py
  SEIS764 - Artificial Intelligence
  John Wagener, Kwame Sefah, Gavin Pedersen, Vong Vang, Zach Aaberg

  Generates the neighborhood (xview.neighborhood) graph given
  a master neighborhood mapping files and a set of filtered images.

  If you want to filter out images for different datasets, such as if oyu only want
  to look at hurricanes, then run filter_images.py first and then point this to
  the resulting directory that contains only filtered images.

  This script uses the master neighborhood mapping which was generated by
  running the postgres nearest neighbor script and producing a table
  which was exported as xview.master.neighborhood.

  The output is a filtered neighborhoodmap.
  each entry needs to have a unique integer, so an easy way to find a unique int
  is to convert the UUID to an int.

  Resulting format:
  <source uuid as in><TAB><destination uuid as int><TAB>distance

  Next: run preprocess_xview_dataset.py
"""
import os
import re
import uuid

split_char = "\t"
# Path to Zach's post processed masked images.
mask_image_location = "../../data/filtered_images_for_training/"
filename_content = "../../data/filtered_images_for_training_tf/xview.content"
# format is source_UUID   dest_UUID    distance       index (unused)
filename_master_neighborhood = "../../data/filtered_images_for_training_tf/xview.master.neighborhood"
# format    int(source_UUID)      int(dest_UUID)      distance
filename_neighborhood = "../../data/filtered_images_for_training_tf/xview.neighborhood"

print("Reading master neighborhood map filename_master_neighborhood=" + filename_master_neighborhood)
input_master_neighborhood = open(filename_master_neighborhood, "r")
neighborhood = {}
total_relationships = 0
for line in input_master_neighborhood:
    line = line.strip()
    data = line.split(split_char)
    if data[0] not in neighborhood:
        neighborhood[data[0]] = []
    neighborhood[data[0]].append(line)
    total_relationships = total_relationships + 1
print("Master neighborhood entries num_nodes=" + str(len(neighborhood.keys())) +
      " total_relationships=" + str(total_relationships))

output_content_counter = 0
output_neighborhood_counter = 0
output_content = open(filename_content, "w")
output_neighborhood = open(filename_neighborhood, "w")
print("Walking image directory to see what mappings we need to gneerate...")
for (root, dirs, files) in os.walk(mask_image_location, topdown=True):
    for name in files:
        filename = os.path.join(root, name)
        no_path = re.sub(mask_image_location, "", filename)
        # Regex wants 2 \ to remove them.
        classification = re.sub("\\\\.*", "", no_path)
        house_id = re.sub("_.*", "", re.sub(classification + "\\\\", "", no_path))
        uuid_id = uuid.UUID(house_id)

        # Keep this for debugging UUID to int issues.
        # output_content.write(str(uuid_id) + "\t" + str(uuid_id.int) + "\t" + filename + "\t" + classification + "\n")
        output_content.write(str(uuid_id.int) + "\t" + filename + "\t" + classification + "\n")

        # Keep track of how many items written
        output_content_counter = output_content_counter + 1
        # Write neighborhoods.  Convert ID to int for use in tensorflow.
        if house_id in neighborhood:
            for item in neighborhood[str(house_id)]:
                entry = item.split("\t")
                # Convert to integers from UUID
                source = uuid.UUID(entry[0])
                destination = uuid.UUID(entry[1])

                # Keep this for debugging UUID to int issues.
                # output_neighborhood.write(str(source) + "/" + str(source.int) + "\t" + str(destination) + "/" + str(
                #    destination.int) + "\t" + str(entry[2]) + "\n")
                output_neighborhood.write(str(source.int) + "\t" + str(destination.int) + "\t" + str(entry[2]) + "\n")

                output_neighborhood_counter = output_neighborhood_counter + 1

output_content.close()
output_neighborhood.close()

print("-------------------------------------------------")
print("Number of houses processed       --> output_content_counter      = " + str(output_content_counter))
print("Number of relationships generated--> output_neighborhood_counter = " + str(output_neighborhood_counter))

print("")
print("Done.")
